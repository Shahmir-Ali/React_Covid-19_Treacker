{"version":3,"sources":["components/Navbar.js","components/chart.js","components/AllCountriesData.js","components/AllCountries.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","text","justifyContent","img","width","position","top","title","breakpoints","up","display","marginLeft","search","borderRadius","shape","backgroundColor","fade","palette","common","white","spacing","searchIcon","padding","height","pointerEvents","alignItems","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","Navbar","classes","className","AppBar","style","Toolbar","Typography","variant","noWrap","src","alt","Chart","data","cases","recovered","deaths","countryData","country","console","log","useState","dailyData","setDailyData","useEffect","a","fetch","response","json","alldata","map","critical","getData","LineChart","length","labels","datasets","label","borderColor","fill","Barchart","options","legend","fontColor","fontSize","scales","yAxes","ticks","beginAtZero","xAxes","marginTop","media","paper","textAlign","secondary","green","primary","bottom1","borderBottom","bottom2","bottom3","AllCountriesData","setcountry","setData","GlobalData","setGlobalData","lastUpdate","Grid","container","item","xs","sm","Paper","elevation","progress","href","maxWidth","margin","dropdown","fontWeight","marginBottom","h1","AllCountries","globalData","setglobalData","justify","FormControl","NativeSelect","id","onChange","e","target","value","Object","keys","key","ind","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4NAQMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,EACVC,KAAM,SACNC,eAAgB,UAIlBC,IAAK,CACHC,MAAO,OAGPC,SAAU,WACRC,IAAK,QAETC,MAAM,aACJP,SAAU,GAETF,EAAMU,YAAYC,GAAG,MAAQ,CAC5BC,QAAS,QACTR,eAAgB,SAChBS,WAAY,UAKhBC,OAAO,aACLP,SAAU,WACVQ,aAAcf,EAAMgB,MAAMD,aAC1BE,gBAAiBC,YAAKlB,EAAMmB,QAAQC,OAAOC,MAAO,KAClD,UAAW,CACTJ,gBAAiBC,YAAKlB,EAAMmB,QAAQC,OAAOC,MAAO,MAEpDR,WAAY,EACZP,MAAO,QACNN,EAAMU,YAAYC,GAAG,MAAQ,CAC5BE,WAAYb,EAAMsB,QAAQ,GAC1BhB,MAAO,SAGXiB,WAAY,CACVC,QAASxB,EAAMsB,QAAQ,EAAG,GAC1BG,OAAQ,OACRlB,SAAU,WACVmB,cAAe,OACfd,QAAS,OACTe,WAAY,SACZvB,eAAgB,UAElBwB,UAAW,CACTC,MAAO,WAETC,WAAW,aACTN,QAASxB,EAAMsB,QAAQ,EAAG,EAAG,EAAG,GAEhCS,YAAY,cAAD,OAAgB/B,EAAMsB,QAAQ,GAA9B,OACXU,WAAYhC,EAAMiC,YAAYC,OAAO,SACrC5B,MAAO,QACNN,EAAMU,YAAYC,GAAG,MAAQ,CAC5BL,MAAO,OACP,UAAW,CACTA,MAAO,cAMF6B,EAAS,WACpB,IAAMC,EAAUtC,IAEhB,OACE,yBAAKuC,UAAWD,EAAQnC,MACtB,kBAACqC,EAAA,EAAD,CAAQ/B,SAAS,SAAUgC,MAAO,CAACtB,gBAAiB,oCAClD,kBAACuB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYJ,UAAWD,EAAQ3B,MAAOiC,QAAQ,KAAKC,QAAM,GAAzD,IAEE,yBAAKC,IAAI,8HAA8HC,IAAI,WAAWR,UAAWD,EAAQ/B,MAF3K,sB,6EC5EGyC,EAAQ,SAAC,GAA8D,IAAD,IAA5DC,KAAQC,EAAoD,EAApDA,MAAOC,EAA6C,EAA7CA,UAAWC,EAAkC,EAAlCA,OAAUC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,QAKtEC,QAAQC,IAAIH,GALqE,MAO/CI,mBAAS,IAPsC,mBAO1EC,EAP0E,KAO/DC,EAP+D,KAUjFC,qBAAU,WAAM,4CACZ,gCAAAC,EAAA,+EAE2BC,MAAM,0CAAD,OAA2CR,IAF3E,cAEUS,EAFV,gBAG0BA,EAASC,OAHnC,OAGUC,EAHV,OAIIV,QAAQC,IAAIS,GACNhB,EAAOgB,EAAQC,KAAI,SAACR,GAAD,MAAgB,CACvCR,MAAOQ,EAAUS,SACnBf,OAAQM,EAAUN,OAClBD,UAAWO,EAAUP,cAEzBI,QAAQC,IAAI,aAAeP,GACzBU,EAAaM,GAXf,kDAgBEV,QAAQC,IAAR,MAhBF,2DADY,uBAAC,WAAD,wBAoBhBY,KACG,CAACd,IAGJ,IAAMe,EAAYX,EAAUY,OAC1B,kBAAC,IAAD,CACErB,KAAM,CACJsB,OAAQb,EAAUQ,KAAI,qBAAGf,aACzBqB,SAAU,CACR,CACEvB,KAAMS,EAAUQ,KAAI,qBAAGhB,SACvBuB,MAAO,WACPC,YAAa,UACbC,MAAM,GAER,CACE1B,KAAMS,EAAUQ,KAAI,qBAAGd,UACvBqB,MAAO,SACPC,YAAa,MACbvD,gBAAiB,uBACjBwD,MAAM,OAKZ,KAGEC,EAAW1B,EACf,kBAAC,IAAD,CACED,KAAM,CACJsB,OAAQ,CAAC,WAAY,YAAa,UAClCC,SAAU,CACR,CACEC,MAAO,SACPtD,gBAAiB,CAEf,uBACA,uBACA,wBAEF8B,KAAM,CAACC,EAAOC,EAAWC,MAK/ByB,QAAS,CACPC,OAAQ,CAAEhE,SAAS,GACnBH,MAAO,CAAEG,SAAS,EAAMT,KAAK,oBAAD,OAAsBiD,GAAUyB,UAAW,QAASC,SAAU,MAC1FC,OAAQ,CACNC,MAAO,CAAC,CACJC,MAAO,CACHC,aAAY,EACZL,UAAW,QACXC,SAAU,MAGpBK,MAAO,CAAC,CACFF,MAAO,CACHJ,UAAW,QACXC,SAAU,UAOtB,KAEF,OACE,yBAAKzC,UAAW,mBAGfc,EAAcuB,EAAWP,ICtG1BrE,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACJC,SAAU,EAERkF,UAAW,IAEfC,MAAO,CACL5D,OAAQ,KAEVhB,MAAO,CAEPoB,MAAO,QACP1B,KAAM,aAENmF,MAAO,CAEH9D,QAASxB,EAAMsB,QAAQ,GACvBiE,UAAW,SACX1D,MAAO7B,EAAMmB,QAAQhB,KAAKqF,WAO9BC,MAAO,CACJ5D,MAAO,SAGVV,QAAS,CACLuE,QAAS,OACTF,UAAW,QAEbnF,IAAM,CACJC,MAAO,QAETqF,QAAS,CACPC,aAAc,mCAEhBC,QAAS,CACPD,aAAc,mCAEhBE,QAAS,CAEPF,aAAc,0BAMTG,EAAmB,SAAC,GAA6B,IAA3B3C,EAA0B,EAA1BA,QAA0B,EAAjB4C,WAExC3C,QAAQC,IAAIF,GAF6C,MAGjCG,mBAAS,IAHwB,mBAGlDR,EAHkD,KAG5CkD,EAH4C,OAIrB1C,mBAAS,IAJY,mBAIlD2C,EAJkD,KAItCC,EAJsC,KAMzDzC,qBAAU,WAAM,4CACZ,sCAAAC,EAAA,sEAC2BC,MAAM,0CAAD,OAA2CR,IAD3E,cACUS,EADV,gBAEqBA,EAASC,OAF9B,OAEQf,EAFR,OAGUC,EAAyCD,EAAzCC,MAAOC,EAAkCF,EAAlCE,UAAWC,EAAuBH,EAAvBG,OAAQkD,EAAerD,EAAfqD,WAChCH,EAAQ,CAAEjD,QAAOC,YAAWC,SAAQkD,eACpC/C,QAAQC,IAAIP,GACZoD,EAAcpD,GANlB,6CADY,uBAAC,WAAD,wBAUhBmB,KACG,CAACd,IAEJ,IAAMhB,EAAUtC,IAEhB,OACI,yBAAKuC,UAAWD,EAAQnC,MACpB,kBAACoG,EAAA,EAAD,CAAMC,WAAS,EAAChF,QAAS,GACb,kBAAC+E,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnB,kBAACC,EAAA,EAAD,CAAOrE,UAAWD,EAAQkD,MAAOqB,UAAW,GAC5C,yBAAK/D,IAAI,2EAA2EC,IAAI,WAAWR,UAAWD,EAAQ/B,MACtH,wBAAIgC,UAAWD,EAAQ3B,OAAvB,YACA,4BAAKyF,EAAWlD,OAChB,yBAAKX,UAAWD,EAAQwE,UAExB,yBAAKvE,UAAWD,EAAQuD,aAI5B,kBAACU,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnB,kBAACC,EAAA,EAAD,CAAOrE,UAAWD,EAAQkD,MAAOqB,UAAW,GAC1C,yBAAK/D,IAAI,4EAA4EC,IAAI,WAAWR,UAAWD,EAAQ/B,MAEzH,wBAAIgC,UAAWD,EAAQ3B,OAAvB,cACA,4BAAKyF,EAAWjD,WAChB,yBAAKZ,UAAWD,EAAQwE,UACxB,yBAAKvE,UAAWD,EAAQyD,aAK5B,kBAACQ,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnB,kBAACC,EAAA,EAAD,CAAOrE,UAAWD,EAAQkD,MAAOqB,UAAW,GAC5C,yBAAK/D,IAAI,yEAAyEC,IAAI,WAAWR,UAAWD,EAAQ/B,MAEpH,wBAAIgC,UAAWD,EAAQ3B,OAAvB,UACA,4BAAKyF,EAAWhD,QAChB,yBAAKb,UAAWD,EAAQwE,UAExB,yBAAKvE,UAAWD,EAAQ0D,aAM5B,kBAACO,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,IACvB,kBAAC,EAAD,CAAO1D,KAAMA,EAAMI,YAAa+C,EAAY9C,QAASA,KAErD,kBAACiD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,IACtB,qDAA0B,uBAAGI,KAAK,8BAAR,0BCjH7C/G,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,SAAU,EACV4G,SAAU,IACVC,OAAQ,SACR3B,UAAW,IAGf3E,MAAO,CACPoB,MAAO,UACP1B,KAAM,aAENmF,MAAO,CACH9D,QAASxB,EAAMsB,QAAQ,GACvBiE,UAAW,SACX1D,MAAO7B,EAAMmB,QAAQhB,KAAKqF,WAE9BwB,SAAU,CACNlC,SAAU,OACVmC,WAAY,OAEZC,aAAc,mBAElBC,GAAI,CACAtF,MAAO,aAMFuF,EAAe,WAAO,IAAD,EACA7D,mBAAS,YADT,mBACvBH,EADuB,KACd4C,EADc,OAEMzC,mBAAS,CAAC,KAFhB,mBAEvB8D,EAFuB,KAEXC,EAFW,KAI9B5D,qBAAU,WAAM,4CACZ,8BAAAC,EAAA,sEAE2BC,MAAM,2CAFjC,cAEUC,EAFV,gBAIqBA,EAASC,OAJ9B,OAIQf,EAJR,OAUIuE,EAAcvE,GAVlB,4CADY,uBAAC,WAAD,wBAeZmB,KACD,CAACoD,IAEJ,IAAMlF,EAAUtC,IAEhB,OACI,6BACA,kBAACuG,EAAA,EAAD,CAAMC,WAAS,EAACjE,UAAWD,EAAQnC,KAAMqB,QAAS,GAC9C,kBAAC+E,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACH,EAAA,EAAD,CAAMC,WAAS,EAACiB,QAAQ,UAEpB,kBAAClB,EAAA,EAAD,CAAME,MAAI,GAEV,kBAACiB,EAAA,EAAD,CAAcnF,UAAWD,EAAQ4E,UAC7B,kBAACS,EAAA,EAAD,CAAcC,GAAG,SAASC,SAAU,SAACC,GAAD,OAAM5B,EAAW4B,EAAEC,OAAOC,SAE9D,4BAAQA,MAAO1E,GAAWA,GACrB2E,OAAOC,KAAKX,GAAYrD,KAAI,SAACiE,EAAKC,GAC/B,OACJ,4BAAQD,IAAKC,EAAKJ,MAAOT,EAAWY,GAAK7E,SAAUiE,EAAWY,GAAK7E,iBAWnF,kBAACiD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IAGP,wBAAInE,UAAWD,EAAQ+E,IAAK/D,EAA5B,uBACI,kBAAC,EAAD,CAAkBA,QAASA,EAAS4C,WAAYA,QCvEzDmC,MAdf,WAEE,OACE,yBAAK9F,UAAU,QAEZ,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDa+F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhG,QAAQgG,MAAMA,EAAMC,a","file":"static/js/main.8e3e932b.chunk.js","sourcesContent":["import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n// import InputBase from '@material-ui/core/InputBase';\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\n// import SearchIcon from '@material-ui/icons/Search';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    text: 'center',\r\n    justifyContent: 'center',\r\n    \r\n\r\n  },\r\n  img: {\r\n    width: '3rem',\r\n    // marginTop: '2rem',\r\n    \r\n    position: 'relative',\r\n      top: '1rem'\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    // display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n      justifyContent: 'center',\r\n      marginLeft: '44rem',\r\n      \r\n      \r\n    },\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(1),\r\n      width: 'auto',\r\n    },\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: '12ch',\r\n      '&:focus': {\r\n        width: '20ch',\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nexport const Navbar = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\"  style={{backgroundColor: '10px solid rgba(255, 0, 0, 0.5)'}}>\r\n        <Toolbar>\r\n          <Typography className={classes.title} variant=\"h6\" noWrap>\r\n            {/* Covid-19-Tracker-App */}C\r\n            <img src=\"https://images.vexels.com/media/users/3/199841/isolated/lists/96a7cac08ad4539e1888d8f5c82b5f48-coronavirus-covid19-icon.png\" alt=\"covid-19\" className={classes.img}/>\r\n          VID-19-TRACKER\r\n          </Typography>\r\n          {/* <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Enter Country..\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              inputProps={{ 'aria-label': 'search' }}\r\n            />\r\n          </div> */}\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport {Bar,Line } from 'react-chartjs-2';\r\n// import { green } from '@material-ui/core/colors';\r\nimport '../App.css'\r\n\r\n\r\nexport const Chart = ({data: { cases, recovered, deaths }, countryData, country})=>{\r\n  \r\n  // displayName: 'BarExample';\r\n\r\n  // console.log(data);\r\n  console.log(countryData);\r\n  \r\n  const [dailyData, setDailyData] = useState({});\r\n  // const [GlobalData, setGlobalData] = useState({});\r\n  // it takes 2 thing = 1st is callback function and 2nd is array\r\n  useEffect(() => {\r\n      async function getData() {\r\n        try {\r\n          const response = await fetch(`https://corona.lmao.ninja/v2/countries/${country}`);\r\n          const alldata = await response.json();\r\n          console.log(alldata);\r\n          const data = alldata.map((dailyData) => ({\r\n            cases: dailyData.critical,\r\n          deaths: dailyData.deaths,\r\n          recovered: dailyData.recovered,\r\n        }));\r\n      console.log(\"chart data\" + data);\r\n        setDailyData(alldata);\r\n      \r\n\r\n      }\r\n      catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  getData();\r\n  }, [country])\r\n\r\n\r\n  const LineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ recovered }) => recovered),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ cases }) => cases),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  // Barchart\r\n  const Barchart = cases ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              // \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [cases, recovered, deaths],\r\n          },\r\n        ],\r\n      }}\r\n      \r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current State in ${country}`,fontColor: 'black', fontSize: '22'},\r\n        scales: {\r\n          yAxes: [{\r\n              ticks: {\r\n                  beginAtZero:true,\r\n                  fontColor: 'black',\r\n                  fontSize: 16\r\n              },\r\n          }],\r\n        xAxes: [{\r\n              ticks: {\r\n                  fontColor: 'black',\r\n                  fontSize: 16\r\n              },\r\n          }]\r\n      } \r\n      }}\r\n      \r\n    />\r\n  ) : null;\r\n\r\n    return (\r\n      <div className={\"chart-container\"}>\r\n        {/* <h2>Country record are</h2> */}\r\n        \r\n      {countryData ? Barchart : LineChart}\r\n      \r\n    </div>\r\n     \r\n    );\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {Chart} from './chart';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n        // maxWidth: 1000,\r\n        marginTop: 50,\r\n    },\r\n    media: {\r\n      height: 140,\r\n    },\r\n    title: {\r\n    // color: '#3f51b5',\r\n    color: 'black',\r\n    text: 'uppercase',\r\n    },\r\n    paper: {\r\n        \r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n      \r\n        // padding: '1rem',\r\n        // marginTop: 50,\r\n        // width: '95%',\r\n        // height: 350,\r\n    },\r\n    green: {\r\n       color: 'green',\r\n    //    backgroundColor: 'green',\r\n    },\r\n    palette: {\r\n        primary: 'blue',\r\n        secondary: 'pink',\r\n      },\r\n      img : {\r\n        width: '5rem',\r\n      },\r\n      bottom1: {\r\n        borderBottom: '10px solid rgba(0, 0, 255, 0.5)', \r\n      },\r\n      bottom2: {\r\n        borderBottom: '10px solid rgba(0, 255, 0, 0.5)', \r\n      },\r\n      bottom3: {\r\n        // borderBottom: '10px solid rgba(255, 0, 0, 0.5);', \r\n        borderBottom: '10px solid #d50000',\r\n      }\r\n}));\r\n\r\n\r\n// export default function InfoPanel() {\r\nexport const AllCountriesData = ({ country, setcountry }) => {\r\n    \r\n    console.log(country);\r\n    const [data, setData] = useState({});\r\n    const [GlobalData, setGlobalData] = useState({});\r\n    // it takes 2 thing = 1st is callback function and 2nd is array\r\n    useEffect(() => {\r\n        async function getData() {\r\n            const response = await fetch(`https://corona.lmao.ninja/v2/countries/${country}`);\r\n            let data = await response.json();\r\n            let { cases, recovered, deaths, lastUpdate } = data;\r\n            setData({ cases, recovered, deaths, lastUpdate });\r\n            console.log(data);\r\n            setGlobalData(data);\r\n\r\n        }\r\n    getData();\r\n    }, [country])\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container spacing={4} >\r\n                        <Grid item xs={12} sm={4}>\r\n                            <Paper className={classes.paper} elevation={5}> \r\n                            <img src=\"http://covid19-virus-tracker.surge.sh/static/media/infected.4abefb64.svg\" alt=\"covid-19\" className={classes.img}/>\r\n                            <h3 className={classes.title}>Infected</h3>\r\n                            <h3>{GlobalData.cases}</h3>\r\n                            <div className={classes.progress}>\r\n                             \r\n                            <div className={classes.bottom1}></div>\r\n                            </div>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={4}>\r\n                            <Paper className={classes.paper} elevation={5}>\r\n                              <img src=\"http://covid19-virus-tracker.surge.sh/static/media/recovered.05cc8e67.svg\" alt=\"covid-19\" className={classes.img}/>\r\n                             \r\n                            <h3 className={classes.title}>RECOVERIES</h3>\r\n                            <h3>{GlobalData.recovered}</h3>\r\n                            <div className={classes.progress}>\r\n                            <div className={classes.bottom2}></div>\r\n                          \r\n                            </div>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={4}>\r\n                            <Paper className={classes.paper} elevation={5}> \r\n                            <img src=\"http://covid19-virus-tracker.surge.sh/static/media/deaths.df846e3e.svg\" alt=\"covid-19\" className={classes.img}/>\r\n                            \r\n                            <h3 className={classes.title}>DEATHS</h3>\r\n                            <h3>{GlobalData.deaths}</h3>\r\n                            <div className={classes.progress}>\r\n                            {/* <LinearProgress variant=\"determinate\" /> */}\r\n                            <div className={classes.bottom3}></div>\r\n                            \r\n                            </div>\r\n                            </Paper>\r\n                            \r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12}>\r\n                        <Chart data={data} countryData={GlobalData} country={country}/>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={12}>\r\n                         <p>All rights Reserved by <a href=\"https://muhammadhasnain.tk\">Muhammad Hasnain </a></p>\r\n                        </Grid>\r\n             </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n// import Paper from '@material-ui/core/Paper';\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { AllCountriesData } from './AllCountriesData';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        maxWidth: 700,\r\n        margin: '0 auto',\r\n        marginTop: 50,\r\n        \r\n    },\r\n    title: {\r\n    color: '#3f51b5',\r\n    text: 'uppercase',\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    dropdown: {\r\n        fontSize: '3rem',\r\n        fontWeight: 'bold',\r\n        // width: '100%',\r\n        marginBottom: '30px !important',\r\n    },\r\n    h1: {\r\n        color: 'black',\r\n    },\r\n    \r\n}));\r\n\r\n// export default function InfoPanel() {\r\nexport const AllCountries = () => {\r\n    const [country, setcountry] = useState(\"pakistan\");\r\n    const [globalData, setglobalData] = useState([{}]);\r\n    // it takes 2 thing = 1st is callback function and 2nd is array\r\n    useEffect(() => {\r\n        async function getData() {\r\n            // const response = await fetch(\"https://api.thevirustracker.com/free-api?countryTotals=ALL\");\r\n            const response = await fetch(\"https://corona.lmao.ninja/v2/countries/\");\r\n            \r\n            let data = await response.json();\r\n\r\n            // console.log(data);\r\n            // console.log(data[0].country);\r\n            // delete data.results[0].source;\r\n            // setglobalData(Object.values(data.countryitems[0]));\r\n            setglobalData(data);\r\n            // console.log(data.countryitems[0][1]);\r\n\r\n        }\r\n        getData();\r\n    }, [setglobalData])\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n        <Grid container className={classes.root} spacing={2}>\r\n            <Grid item xs={8}>\r\n                <Grid container justify=\"center\">\r\n            \r\n                    <Grid item>\r\n                    {/* <Paper className={classes.paper} /> */}\r\n                    <FormControl  className={classes.dropdown}>\r\n                        <NativeSelect id=\"select\" onChange={(e)=> setcountry(e.target.value)}>\r\n                            {/* console.log(globalData); */}\r\n                        <option value={country} >{country}</option>\r\n                            {Object.keys(globalData).map((key, ind) => {\r\n                                return(\r\n                            <option key={ind} value={globalData[key].country}>{globalData[key].country}</option>\r\n                                )\r\n                            })}\r\n                            \r\n                        \r\n                            </NativeSelect>\r\n                    </FormControl>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n               \r\n                    \r\n                    <h1 className={classes.h1}>{country} Covid-19 Situation</h1>\r\n                        <AllCountriesData country={country} setcountry={setcountry}/>\r\n                    \r\n            </Grid>\r\n\r\n            \r\n    </Grid>\r\n\r\n       </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\n// import { Moode_changing } from './components/Moode_changing'\r\nimport { Navbar } from './components/Navbar'\r\n// import { InfoPanel } from './components/InfoPanel'\r\n// import { FootNav } from './components/FootNav'\r\nimport { AllCountries } from './components/AllCountries'\r\nfunction App() {\r\n  // const screenConfig = React.useState(0);\r\n  return (\r\n    <div className=\"body\">\r\n       {/* <Moode_changing/> */}\r\n       <Navbar/>\r\n       <AllCountries/>\r\n       {/* <InfoPanel currentScreen={screenConfig[0]}/>\r\n       <FootNav  screenConfig={screenConfig}/> */}\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}