{"ast":null,"code":"var _jsxFileName = \"F:\\\\coursera_react_course\\\\muhammadhasnain\\\\src\\\\components\\\\AllCountries.js\";\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles'; // import Paper from '@material-ui/core/Paper';\n\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\nimport Grid from '@material-ui/core/Grid';\nimport { AllCountriesData } from './AllCountriesData';\nimport Chart from './chart';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    maxWidth: 1000,\n    margin: '0 auto',\n    marginTop: 50\n  },\n  title: {\n    color: '#3f51b5',\n    text: 'uppercase'\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  },\n  dropdown: {\n    fontSize: '3rem',\n    fontWeight: 'bold'\n  },\n  h1: {\n    color: 'grey'\n  }\n})); // export default function InfoPanel() {\n\nexport const AllCountries = () => {\n  const [country, setcountry] = useState(\"pakistan\");\n  const [globalData, setglobalData] = useState([{}]); // it takes 2 thing = 1st is callback function and 2nd is array\n\n  useEffect(() => {\n    async function getData() {\n      // const response = await fetch(\"https://api.thevirustracker.com/free-api?countryTotals=ALL\");\n      const response = await fetch(\"https://corona.lmao.ninja/v2/countries/\");\n      let data = await response.json();\n      console.log(data);\n      console.log(data[0].country); // delete data.results[0].source;\n      // setglobalData(Object.values(data.countryitems[0]));\n\n      setglobalData(data); // console.log(data.countryitems[0][1]);\n    }\n\n    getData();\n  }, [setglobalData]);\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: classes.root,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    className: classes.dropdown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(NativeSelect, {\n    id: \"select\",\n    onChange: e => setcountry(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 25\n    }\n  }, \"console.log(globalData);\", /*#__PURE__*/React.createElement(\"option\", {\n    value: country,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 25\n    }\n  }, country), Object.keys(globalData).map((key, ind) => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: ind,\n      value: globalData[key].country,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 29\n      }\n    }, globalData[key].country);\n  })))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: classes.h1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }\n  }, country, \" Covid-19 Situation\"), /*#__PURE__*/React.createElement(AllCountriesData, {\n    country: country,\n    setcountry: setcountry,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 25\n    }\n  })))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 22\n    }\n  }, \"Chart Data\"), /*#__PURE__*/React.createElement(Chart, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 22\n    }\n  }))))));\n};","map":{"version":3,"sources":["F:/coursera_react_course/muhammadhasnain/src/components/AllCountries.js"],"names":["React","useEffect","useState","makeStyles","NativeSelect","FormControl","Grid","AllCountriesData","Chart","useStyles","theme","root","flexGrow","maxWidth","margin","marginTop","title","color","text","paper","padding","spacing","textAlign","palette","secondary","dropdown","fontSize","fontWeight","h1","AllCountries","country","setcountry","globalData","setglobalData","getData","response","fetch","data","json","console","log","classes","e","target","value","Object","keys","map","key","ind"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n// import Paper from '@material-ui/core/Paper';\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { AllCountriesData } from './AllCountriesData'\r\n\r\nimport Chart from './chart';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        maxWidth: 1000,\r\n        margin: '0 auto',\r\n        marginTop: 50,\r\n        \r\n    },\r\n    title: {\r\n    color: '#3f51b5',\r\n    text: 'uppercase',\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    dropdown: {\r\n        fontSize: '3rem',\r\n        fontWeight: 'bold',\r\n    },\r\n    h1: {\r\n        color: 'grey',\r\n    }\r\n}));\r\n\r\n// export default function InfoPanel() {\r\nexport const AllCountries = () => {\r\n    const [country, setcountry] = useState(\"pakistan\");\r\n    const [globalData, setglobalData] = useState([{}]);\r\n    // it takes 2 thing = 1st is callback function and 2nd is array\r\n    useEffect(() => {\r\n        async function getData() {\r\n            // const response = await fetch(\"https://api.thevirustracker.com/free-api?countryTotals=ALL\");\r\n            const response = await fetch(\"https://corona.lmao.ninja/v2/countries/\");\r\n            \r\n            let data = await response.json();\r\n\r\n            console.log(data);\r\n            console.log(data[0].country);\r\n            // delete data.results[0].source;\r\n            // setglobalData(Object.values(data.countryitems[0]));\r\n            setglobalData(data);\r\n            // console.log(data.countryitems[0][1]);\r\n\r\n        }\r\n        getData();\r\n    }, [setglobalData])\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n        <Grid container className={classes.root} spacing={2}>\r\n            <Grid item xs={12}>\r\n                <Grid container justify=\"center\">\r\n            \r\n                    <Grid item>\r\n                    {/* <Paper className={classes.paper} /> */}\r\n                    <FormControl  className={classes.dropdown}>\r\n                        <NativeSelect id=\"select\" onChange={(e)=> setcountry(e.target.value)}>\r\n                            console.log(globalData);\r\n                        <option value={country} >{country}</option>\r\n                            {Object.keys(globalData).map((key, ind) => {\r\n                                return(\r\n                            <option key={ind} value={globalData[key].country}>{globalData[key].country}</option>\r\n                                )\r\n                            })}\r\n                            \r\n                        \r\n                            </NativeSelect>\r\n                    </FormControl>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n                <Grid container justify=\"center\">\r\n            \r\n                    <Grid item>\r\n                    {/* <Paper className={classes.paper} /> */}\r\n                    \r\n                    <h1 className={classes.h1}>{country} Covid-19 Situation</h1>\r\n                        <AllCountriesData country={country} setcountry={setcountry}/>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n                <Grid container justify=\"center\">\r\n            \r\n                    <Grid item>\r\n                    {/* <Paper className={classes.paper} /> */}\r\n                     <h1>Chart Data</h1>\r\n                     <Chart/>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n    </Grid>\r\n\r\n       </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}