{"ast":null,"code":"var _jsxFileName = \"F:\\\\coursera_react_course\\\\muhammadhasnain\\\\src\\\\components\\\\chart.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Bar, Line } from 'react-chartjs-2'; // import { green } from '@material-ui/core/colors';\n\nimport '../App.css';\nexport const Chart = ({\n  data: {\n    cases,\n    recovered,\n    deaths\n  },\n  countryData,\n  country\n}) => {\n  // displayName: 'BarExample';\n  // console.log(data);\n  console.log(countryData);\n  const [dailyData, setDailyData] = useState({}); // const [GlobalData, setGlobalData] = useState({});\n  // it takes 2 thing = 1st is callback function and 2nd is array\n\n  useEffect(() => {\n    async function getData() {\n      try {\n        const response = await fetch(`https://corona.lmao.ninja/v2/countries/${country}`);\n        const alldata = await response.json();\n        console.log(alldata);\n        const data = alldata.map(dailyData => ({\n          cases: dailyData.critical,\n          deaths: dailyData.deaths,\n          recovered: dailyData.recovered\n        }));\n        console.log(\"chart data\" + data);\n        setDailyData(alldata);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    getData();\n  }, [country]);\n  const LineChart = dailyData.length ? /*#__PURE__*/React.createElement(Line, {\n    data: {\n      labels: dailyData.map(({\n        recovered\n      }) => recovered),\n      datasets: [{\n        data: dailyData.map(({\n          cases\n        }) => cases),\n        label: \"Infected\",\n        borderColor: \"#3333ff\",\n        fill: true\n      }, {\n        data: dailyData.map(({\n          deaths\n        }) => deaths),\n        label: \"Deaths\",\n        borderColor: \"red\",\n        backgroundColor: \"rgba(255, 0, 0, 0.5)\",\n        fill: true\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }) : null; // Barchart\n\n  const Barchart = cases ? /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n      fontColor: 'white',\n      datasets: [{\n        label: \"People\",\n        backgroundColor: [\"rgba(0, 0, 255, 0.5)\", \"rgba(0, 255, 0, 0.5)\", \"rgba(255, 0, 0, 0.5)\"],\n        fontColor: 'white',\n        data: [cases, recovered, deaths]\n      }]\n    },\n    options: {\n      // legend: { display: false },\n      title: {\n        display: true,\n        text: `Current State in ${country}`,\n        fontColor: 'white'\n      },\n      legend: {\n        display: false,\n        labels: {\n          // This more specific font property overrides the global property\n          fontColor: 'black'\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chart-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, countryData ? Barchart : LineChart);\n};","map":{"version":3,"sources":["F:/coursera_react_course/muhammadhasnain/src/components/chart.js"],"names":["React","useEffect","useState","Bar","Line","Chart","data","cases","recovered","deaths","countryData","country","console","log","dailyData","setDailyData","getData","response","fetch","alldata","json","map","critical","error","LineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","Barchart","fontColor","title","display","text","legend"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {Bar,Line } from 'react-chartjs-2';\r\n// import { green } from '@material-ui/core/colors';\r\nimport '../App.css'\r\n\r\n\r\nexport const Chart = ({data: { cases, recovered, deaths }, countryData, country})=>{\r\n  \r\n  // displayName: 'BarExample';\r\n\r\n  // console.log(data);\r\n  console.log(countryData);\r\n  \r\n  const [dailyData, setDailyData] = useState({});\r\n  // const [GlobalData, setGlobalData] = useState({});\r\n  // it takes 2 thing = 1st is callback function and 2nd is array\r\n  useEffect(() => {\r\n      async function getData() {\r\n        try {\r\n          const response = await fetch(`https://corona.lmao.ninja/v2/countries/${country}`);\r\n          const alldata = await response.json();\r\n          console.log(alldata);\r\n          const data = alldata.map((dailyData) => ({\r\n            cases: dailyData.critical,\r\n          deaths: dailyData.deaths,\r\n          recovered: dailyData.recovered,\r\n        }));\r\n      console.log(\"chart data\" + data);\r\n        setDailyData(alldata);\r\n      \r\n\r\n      }\r\n      catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  getData();\r\n  }, [country])\r\n\r\n\r\n  const LineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ recovered }) => recovered),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ cases }) => cases),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n            fill: true,\r\n            \r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  // Barchart\r\n  const Barchart = cases ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        fontColor: 'white',\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            fontColor: 'white',\r\n            data: [cases, recovered, deaths],\r\n          },\r\n        ],\r\n      }}\r\n      \r\n      options={{\r\n        // legend: { display: false },\r\n        title: { display: true, text: `Current State in ${country}`,fontColor: 'white'},\r\n        legend: {\r\n          display: false ,\r\n          labels: {\r\n              // This more specific font property overrides the global property\r\n              fontColor: 'black'\r\n          }\r\n      },\r\n      }}\r\n      \r\n    />\r\n  ) : null;\r\n\r\n    return (\r\n      <div className={\"chart-container\"}>\r\n        {/* <h2>Country record are</h2> */}\r\n        \r\n      {countryData ? Barchart : LineChart}\r\n      \r\n    </div>\r\n     \r\n    );\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}