{"ast":null,"code":"var _jsxFileName = \"F:\\\\coursera_react_course\\\\muhammadhasnain\\\\src\\\\components\\\\chart.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Bar, Line } from 'react-chartjs-2';\nexport const Chart = ({\n  data: {\n    confirmed,\n    recovered,\n    deaths\n  },\n  countryData,\n  country\n}) => {\n  // displayName: 'BarExample';\n  // console.log(data);\n  console.log(countryData);\n  const [dailyData, setDailyData] = useState({}); // const [GlobalData, setGlobalData] = useState({});\n  // it takes 2 thing = 1st is callback function and 2nd is array\n\n  useEffect(() => {\n    async function getData() {\n      try {\n        const response = await fetch(`https://corona.lmao.ninja/v2/countries/${country}`);\n        const alldata = await response.json();\n        console.log(alldata);\n        const data = alldata.map(dailyData => ({\n          confirmed: dailyData.critical,\n          deaths: dailyData.deaths,\n          recovered: dailyData.recovered\n        }));\n        console.log(\"chart data\" + data);\n        setDailyData(data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    getData();\n  }, [country]);\n  const LineChart = dailyData.length ? /*#__PURE__*/React.createElement(Line, {\n    data: {\n      labels: dailyData.map(({\n        date\n      }) => date),\n      datasets: [{\n        data: dailyData.map(({\n          confirmed\n        }) => confirmed),\n        label: \"Infected\",\n        borderColor: \"#3333ff\",\n        fill: true\n      }, {\n        data: dailyData.map(({\n          deaths\n        }) => deaths),\n        label: \"Deaths\",\n        borderColor: \"red\",\n        backgroundColor: \"rgba(255, 0, 0, 0.5)\",\n        fill: true\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }) : null; // Barchart\n\n  const Barchart = confirmed ? /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n      datasets: [{\n        label: \"People\",\n        backgroundColor: [\"rgba(0, 0, 255, 0.5)\", \"rgba(0, 255, 0, 0.5)\", \"rgba(255, 0, 0, 0.5)\"],\n        data: [confirmed, recovered, deaths]\n      }]\n    },\n    options: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: `Current State in ${countryData}`\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }) : null; // render() {\n\n  return (\n    /*#__PURE__*/\n    //   <div className={\"chart-container\"}>\n    //     <h2>Country record are</h2>\n    //   {countryData ? Barchart : LineChart}\n    // </div>\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, \"Bar Example (custom size)\"), /*#__PURE__*/React.createElement(Bar, {\n      data: Barchart,\n      width: 100,\n      height: 50,\n      options: {\n        maintainAspectRatio: false\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }))\n  ); // }\n}; // const data = {\n//   labels: [''],\n//   datasets: [\n//     {\n//       label: 'My First dataset',\n//       backgroundColor: 'rgba(255,99,132,0.2)',\n//       borderColor: 'rgba(255,99,132,1)',\n//       borderWidth: 1,\n//       hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n//       hoverBorderColor: 'rgba(255,99,132,1)',\n//       data: [GlobalData.value ]\n//     }\n//   ]\n// };","map":{"version":3,"sources":["F:/coursera_react_course/muhammadhasnain/src/components/chart.js"],"names":["React","useEffect","useState","Bar","Line","Chart","data","confirmed","recovered","deaths","countryData","country","console","log","dailyData","setDailyData","getData","response","fetch","alldata","json","map","critical","error","LineChart","length","labels","date","datasets","label","borderColor","fill","backgroundColor","Barchart","legend","display","title","text","maintainAspectRatio"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {Bar,Line } from 'react-chartjs-2';\r\n\r\n\r\n\r\nexport const Chart = ({data: { confirmed, recovered, deaths }, countryData, country})=>{\r\n  \r\n  // displayName: 'BarExample';\r\n\r\n  // console.log(data);\r\n  console.log(countryData);\r\n  \r\n  const [dailyData, setDailyData] = useState({});\r\n  // const [GlobalData, setGlobalData] = useState({});\r\n  // it takes 2 thing = 1st is callback function and 2nd is array\r\n  useEffect(() => {\r\n      async function getData() {\r\n        try {\r\n          const response = await fetch(`https://corona.lmao.ninja/v2/countries/${country}`);\r\n          const alldata = await response.json();\r\n          console.log(alldata);\r\n          const data = alldata.map((dailyData) => ({\r\n          confirmed: dailyData.critical,\r\n          deaths: dailyData.deaths,\r\n          recovered: dailyData.recovered,\r\n        }));\r\n      console.log(\"chart data\" + data);\r\n        setDailyData(data);\r\n      \r\n\r\n      }\r\n      catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  getData();\r\n  }, [country])\r\n\r\n\r\n  const LineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  // Barchart\r\n  const Barchart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [confirmed, recovered, deaths],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current State in ${countryData}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  // render() {\r\n    return (\r\n    //   <div className={\"chart-container\"}>\r\n    //     <h2>Country record are</h2>\r\n    //   {countryData ? Barchart : LineChart}\r\n    // </div>\r\n      <div>\r\n        <h2>Bar Example (custom size)</h2>\r\n        <Bar\r\n          data={Barchart}\r\n          width={100}\r\n          height={50}\r\n          options={{\r\n            maintainAspectRatio: false\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  // }\r\n}\r\n\r\n// const data = {\r\n//   labels: [''],\r\n//   datasets: [\r\n//     {\r\n//       label: 'My First dataset',\r\n//       backgroundColor: 'rgba(255,99,132,0.2)',\r\n//       borderColor: 'rgba(255,99,132,1)',\r\n//       borderWidth: 1,\r\n//       hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n//       hoverBorderColor: 'rgba(255,99,132,1)',\r\n//       data: [GlobalData.value ]\r\n//     }\r\n//   ]\r\n// };"]},"metadata":{},"sourceType":"module"}