{"ast":null,"code":"var _jsxFileName = \"F:\\\\coursera_react_course\\\\muhammadhasnain\\\\src\\\\components\\\\chart.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport \"../../App.css\";\n\nfunction Chart({\n  data: {\n    confirmed,\n    recovered,\n    deaths\n  },\n  countryData\n}) {\n  // Use State\n  const [dailyData, setDailyData] = useState([]); // Use Effect\n\n  useEffect(() => {\n    // Fetch Data\n    async function fetchData() {\n      try {\n        const response = await fetch(\"https://covid19.mathdro.id/api/daily\");\n        const alldata = await response.json();\n        const data = alldata.map(dailyData => ({\n          confirmed: dailyData.confirmed.total,\n          deaths: dailyData.deaths.total,\n          date: dailyData.reportDate\n        }));\n        setDailyData(data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    fetchData();\n  }, []);\n  const LineChart = dailyData.length ? /*#__PURE__*/React.createElement(Line, {\n    data: {\n      labels: dailyData.map(({\n        date\n      }) => date),\n      datasets: [{\n        data: dailyData.map(({\n          confirmed\n        }) => confirmed),\n        label: \"Infected\",\n        borderColor: \"#3333ff\",\n        fill: true\n      }, {\n        data: dailyData.map(({\n          deaths\n        }) => deaths),\n        label: \"Deaths\",\n        borderColor: \"red\",\n        backgroundColor: \"rgba(255, 0, 0, 0.5)\",\n        fill: true\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }) : null; // Barchart\n\n  const Barchart = confirmed ? /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n      datasets: [{\n        label: \"People\",\n        backgroundColor: [\"rgba(0, 0, 255, 0.5)\", \"rgba(0, 255, 0, 0.5)\", \"rgba(255, 0, 0, 0.5)\"],\n        data: [confirmed.value, recovered.value, deaths.value]\n      }]\n    },\n    options: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: `Current State in ${countryData}`\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chart-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, countryData ? Barchart : LineChart);\n}\n\nexport default Chart;","map":{"version":3,"sources":["F:/coursera_react_course/muhammadhasnain/src/components/chart.js"],"names":["React","useState","useEffect","Bar","Line","Chart","data","confirmed","recovered","deaths","countryData","dailyData","setDailyData","fetchData","response","fetch","alldata","json","map","total","date","reportDate","error","console","log","LineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","Barchart","value","legend","display","title","text"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Bar, Line } from \"react-chartjs-2\";\r\nimport \"../../App.css\";\r\n\r\nfunction Chart({ data: { confirmed, recovered, deaths }, countryData }) {\r\n  // Use State\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  // Use Effect\r\n  useEffect(() => {\r\n    // Fetch Data\r\n    async function fetchData() {\r\n      try {\r\n        const response = await fetch(\"https://covid19.mathdro.id/api/daily\");\r\n        const alldata = await response.json();\r\n        const data = alldata.map((dailyData) => ({\r\n          confirmed: dailyData.confirmed.total,\r\n          deaths: dailyData.deaths.total,\r\n          date: dailyData.reportDate,\r\n        }));\r\n        setDailyData(data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const LineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  // Barchart\r\n  const Barchart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current State in ${countryData}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={\"chart-container\"}>\r\n      {countryData ? Barchart : LineChart}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chart;"]},"metadata":{},"sourceType":"module"}