{"ast":null,"code":"var _jsxFileName = \"F:\\\\coursera_react_course\\\\muhammadhasnain\\\\src\\\\components\\\\chart.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Bar, Line } from \"react-chartjs-2\"; // import \"../../App.css\";\n\nexport const Chart = () => {\n  // function Chart({ data: { confirmed, recovered, deaths }, countryData }) {\n  // Use State\n  const [dailyData, setDailyData] = useState([]); // Use Effect\n\n  useEffect(() => {\n    // Fetch Data\n    async function fetchData() {\n      try {\n        const response = await fetch(\"https://covid19.mathdro.id/api/daily\");\n        const alldata = await response.json();\n        const data = alldata.map(dailyData => ({//   confirmed: dailyData.confirmed.total,\n          //   deaths: dailyData.deaths.total,\n          //   date: dailyData.reportDate,\n        }));\n        setDailyData(data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    fetchData();\n  }, []);\n  const LineChart = dailyData.length ? /*#__PURE__*/React.createElement(Line, {\n    data: {\n      labels: dailyData.map(({\n        date\n      }) => date),\n      datasets: [{\n        data: dailyData.map(({\n          confirmed\n        }) => confirmed),\n        label: \"Infected\",\n        borderColor: \"#3333ff\",\n        fill: true\n      }, {\n        data: dailyData.map(({\n          deaths\n        }) => deaths),\n        label: \"Deaths\",\n        borderColor: \"red\",\n        backgroundColor: \"rgba(255, 0, 0, 0.5)\",\n        fill: true\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }) : null; // Barchart\n\n  const Barchart = confirmed ? /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n      datasets: [{\n        label: \"People\",\n        backgroundColor: [\"rgba(0, 0, 255, 0.5)\", \"rgba(0, 255, 0, 0.5)\", \"rgba(255, 0, 0, 0.5)\"] // data: [confirmed.value, recovered.value, deaths.value],\n\n      }]\n    },\n    options: {\n      legend: {\n        display: false\n      } // title: { display: true, text: `Current State in ${countryData}` },\n\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chart-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, countryData ? Barchart : LineChart);\n}; // export default Chart;","map":{"version":3,"sources":["F:/coursera_react_course/muhammadhasnain/src/components/chart.js"],"names":["React","useState","useEffect","Bar","Line","Chart","dailyData","setDailyData","fetchData","response","fetch","alldata","json","data","map","error","console","log","LineChart","length","labels","date","datasets","confirmed","label","borderColor","fill","deaths","backgroundColor","Barchart","legend","display","countryData"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,GAAT,EAAcC,IAAd,QAA0B,iBAA1B,C,CACA;;AAEA,OAAO,MAAMC,KAAK,GAAG,MAAM;AAC3B;AACE;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,EAAD,CAA1C,CAHyB,CAKzB;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,mBAAeM,SAAf,GAA2B;AACzB,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAD,CAA5B;AACA,cAAMC,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAtB;AACA,cAAMC,IAAI,GAAGF,OAAO,CAACG,GAAR,CAAaR,SAAD,KAAgB,CACzC;AACA;AACA;AAHyC,SAAhB,CAAZ,CAAb;AAKAC,QAAAA,YAAY,CAACM,IAAD,CAAZ;AACD,OATD,CASE,OAAOE,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAEDP,IAAAA,SAAS;AACV,GAlBQ,EAkBN,EAlBM,CAAT;AAoBA,QAAMU,SAAS,GAAGZ,SAAS,CAACa,MAAV,gBAChB,oBAAC,IAAD;AACE,IAAA,IAAI,EAAE;AACJC,MAAAA,MAAM,EAAEd,SAAS,CAACQ,GAAV,CAAc,CAAC;AAAEO,QAAAA;AAAF,OAAD,KAAcA,IAA5B,CADJ;AAEJC,MAAAA,QAAQ,EAAE,CACR;AACET,QAAAA,IAAI,EAAEP,SAAS,CAACQ,GAAV,CAAc,CAAC;AAAES,UAAAA;AAAF,SAAD,KAAmBA,SAAjC,CADR;AAEEC,QAAAA,KAAK,EAAE,UAFT;AAGEC,QAAAA,WAAW,EAAE,SAHf;AAIEC,QAAAA,IAAI,EAAE;AAJR,OADQ,EAOR;AACEb,QAAAA,IAAI,EAAEP,SAAS,CAACQ,GAAV,CAAc,CAAC;AAAEa,UAAAA;AAAF,SAAD,KAAgBA,MAA9B,CADR;AAEEH,QAAAA,KAAK,EAAE,QAFT;AAGEC,QAAAA,WAAW,EAAE,KAHf;AAIEG,QAAAA,eAAe,EAAE,sBAJnB;AAKEF,QAAAA,IAAI,EAAE;AALR,OAPQ;AAFN,KADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADgB,GAqBd,IArBJ,CA1ByB,CAiDzB;;AACA,QAAMG,QAAQ,GAAGN,SAAS,gBACxB,oBAAC,GAAD;AACE,IAAA,IAAI,EAAE;AACJH,MAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,WAAb,EAA0B,QAA1B,CADJ;AAEJE,MAAAA,QAAQ,EAAE,CACR;AACEE,QAAAA,KAAK,EAAE,QADT;AAEEI,QAAAA,eAAe,EAAE,CACf,sBADe,EAEf,sBAFe,EAGf,sBAHe,CAFnB,CAOE;;AAPF,OADQ;AAFN,KADR;AAeE,IAAA,OAAO,EAAE;AACPE,MAAAA,MAAM,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OADD,CAEP;;AAFO,KAfX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADwB,GAqBtB,IArBJ;AAuBA,sBACE;AAAK,IAAA,SAAS,EAAE,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,WAAW,GAAGH,QAAH,GAAcX,SAD5B,CADF;AAKD,CA9EM,C,CAgFP","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Bar, Line } from \"react-chartjs-2\";\r\n// import \"../../App.css\";\r\n\r\nexport const Chart = () => {\r\n// function Chart({ data: { confirmed, recovered, deaths }, countryData }) {\r\n  // Use State\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  // Use Effect\r\n  useEffect(() => {\r\n    // Fetch Data\r\n    async function fetchData() {\r\n      try {\r\n        const response = await fetch(\"https://covid19.mathdro.id/api/daily\");\r\n        const alldata = await response.json();\r\n        const data = alldata.map((dailyData) => ({\r\n        //   confirmed: dailyData.confirmed.total,\r\n        //   deaths: dailyData.deaths.total,\r\n        //   date: dailyData.reportDate,\r\n        }));\r\n        setDailyData(data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const LineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  // Barchart\r\n  const Barchart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            // data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        // title: { display: true, text: `Current State in ${countryData}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={\"chart-container\"}>\r\n      {countryData ? Barchart : LineChart}\r\n    </div>\r\n  );\r\n}\r\n\r\n// export default Chart;"]},"metadata":{},"sourceType":"module"}