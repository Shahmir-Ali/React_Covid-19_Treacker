{"ast":null,"code":"import _regeneratorRuntime from\"F:\\\\coursera_react_course\\\\muhammadhasnain\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"F:\\\\coursera_react_course\\\\muhammadhasnain\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"F:\\\\coursera_react_course\\\\muhammadhasnain\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{Bar,Line}from'react-chartjs-2';// import { green } from '@material-ui/core/colors';\nimport'../App.css';export var Chart=function Chart(_ref){var _ref$data=_ref.data,cases=_ref$data.cases,recovered=_ref$data.recovered,deaths=_ref$data.deaths,countryData=_ref.countryData,country=_ref.country;// displayName: 'BarExample';\n// console.log(data);\nconsole.log(countryData);var _useState=useState({}),_useState2=_slicedToArray(_useState,2),dailyData=_useState2[0],setDailyData=_useState2[1];// const [GlobalData, setGlobalData] = useState({});\n// it takes 2 thing = 1st is callback function and 2nd is array\nuseEffect(function(){function getData(){return _getData.apply(this,arguments);}function _getData(){_getData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,alldata,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return fetch(\"https://corona.lmao.ninja/v2/countries/\".concat(country));case 3:response=_context.sent;_context.next=6;return response.json();case 6:alldata=_context.sent;console.log(alldata);data=alldata.map(function(dailyData){return{cases:dailyData.critical,deaths:dailyData.deaths,recovered:dailyData.recovered};});console.log(\"chart data\"+data);setDailyData(alldata);_context.next=16;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](0);console.log(_context.t0);case 16:case\"end\":return _context.stop();}}},_callee,null,[[0,13]]);}));return _getData.apply(this,arguments);}getData();},[country]);var LineChart=dailyData.length?/*#__PURE__*/React.createElement(Line,{data:{labels:dailyData.map(function(_ref2){var recovered=_ref2.recovered;return recovered;}),datasets:[{data:dailyData.map(function(_ref3){var cases=_ref3.cases;return cases;}),label:\"Infected\",borderColor:\"#3333ff\",fill:true},{data:dailyData.map(function(_ref4){var deaths=_ref4.deaths;return deaths;}),label:\"Deaths\",borderColor:\"red\",backgroundColor:\"rgba(255, 0, 0, 0.5)\",fill:true}]}}):null;// Barchart\nvar Barchart=cases?/*#__PURE__*/React.createElement(Bar,{data:{labels:[\"Infected\",\"Recovered\",\"Deaths\"],datasets:[{label:\"People\",backgroundColor:[// \"rgba(0, 0, 255, 0.5)\",\n\"rgba(0, 0, 255, 0.5)\",\"rgba(0, 255, 0, 0.5)\",\"rgba(255, 0, 0, 0.5)\"],data:[cases,recovered,deaths]}]},options:{legend:{display:false},title:{display:true,text:\"Current State in \".concat(country),fontColor:'black',fontSize:'22'},scales:{yAxes:[{ticks:{beginAtZero:true,fontColor:'black',fontSize:16}}],xAxes:[{ticks:{fontColor:'black',fontSize:16}}]}}}):null;return/*#__PURE__*/React.createElement(\"div\",{className:\"chart-container\"},countryData?Barchart:LineChart);};","map":{"version":3,"sources":["F:/coursera_react_course/muhammadhasnain/src/components/chart.js"],"names":["React","useEffect","useState","Bar","Line","Chart","data","cases","recovered","deaths","countryData","country","console","log","dailyData","setDailyData","getData","fetch","response","json","alldata","map","critical","LineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","Barchart","legend","display","title","text","fontColor","fontSize","scales","yAxes","ticks","beginAtZero","xAxes"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {Bar,Line } from 'react-chartjs-2';\r\n// import { green } from '@material-ui/core/colors';\r\nimport '../App.css'\r\n\r\n\r\nexport const Chart = ({data: { cases, recovered, deaths }, countryData, country})=>{\r\n  \r\n  // displayName: 'BarExample';\r\n\r\n  // console.log(data);\r\n  console.log(countryData);\r\n  \r\n  const [dailyData, setDailyData] = useState({});\r\n  // const [GlobalData, setGlobalData] = useState({});\r\n  // it takes 2 thing = 1st is callback function and 2nd is array\r\n  useEffect(() => {\r\n      async function getData() {\r\n        try {\r\n          const response = await fetch(`https://corona.lmao.ninja/v2/countries/${country}`);\r\n          const alldata = await response.json();\r\n          console.log(alldata);\r\n          const data = alldata.map((dailyData) => ({\r\n            cases: dailyData.critical,\r\n          deaths: dailyData.deaths,\r\n          recovered: dailyData.recovered,\r\n        }));\r\n      console.log(\"chart data\" + data);\r\n        setDailyData(alldata);\r\n      \r\n\r\n      }\r\n      catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  getData();\r\n  }, [country])\r\n\r\n\r\n  const LineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ recovered }) => recovered),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ cases }) => cases),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  // Barchart\r\n  const Barchart = cases ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              // \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [cases, recovered, deaths],\r\n          },\r\n        ],\r\n      }}\r\n      \r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current State in ${country}`,fontColor: 'black', fontSize: '22'},\r\n        scales: {\r\n          yAxes: [{\r\n              ticks: {\r\n                  beginAtZero:true,\r\n                  fontColor: 'black',\r\n                  fontSize: 16\r\n              },\r\n          }],\r\n        xAxes: [{\r\n              ticks: {\r\n                  fontColor: 'black',\r\n                  fontSize: 16\r\n              },\r\n          }]\r\n      } \r\n      }}\r\n      \r\n    />\r\n  ) : null;\r\n\r\n    return (\r\n      <div className={\"chart-container\"}>\r\n        {/* <h2>Country record are</h2> */}\r\n        \r\n      {countryData ? Barchart : LineChart}\r\n      \r\n    </div>\r\n     \r\n    );\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}